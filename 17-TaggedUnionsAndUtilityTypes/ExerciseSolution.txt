Exercise 1:
Create a discriminated union type for TextFile and ImageFile with tags "text" and "image" and a function processFile(file: File) that behaves differently based on the type.
soln:
type TextFile = {text:"text", textfile:string};
type ImageFile = {text: "image", image:string};

type Files = TextFile | ImageFile;

function processFile(file: Files){
    switch(file.text){
        case "text":
        console.log("saving as text file");
        break;
        case 'image':
        console.log("savning as image file");
        break;
        
    }
}
processFile({text:"image", image:"image url"});


Exercise 2:
Create a type Product and use:
Partial for update requests
Pick for showing only name and price
Omit to remove internal fields like _id

type Product = {
    name: string,
    price: number,
    from: string,
    _id: string
}

type ProductName = Partial<Product>;
type ProductDetails = Pick<Product, "name" | "price">
type Test = Omit<Product, "_id">