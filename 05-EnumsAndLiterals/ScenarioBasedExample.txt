 Real-World Scenario: E-commerce Order Management System
Imagine you're building an Order Management System for an e-commerce application. 

You need to manage:

The status of an order (Pending, Shipped, Delivered, Cancelled)

The type of payment method (Cash, Card, UPI)

And allow only certain size options for clothing items (small, medium, large)

These are perfect cases for using enums and literal types.


✅ Enums: Managing Order Status
Enums help group fixed states in your app — like the status of an order.
code
enum OrderStatus {
  Pending = "PENDING",
  Shipped = "SHIPPED",
  Delivered = "DELIVERED",
  Cancelled = "CANCELLED"
}

interface Order {
  id: string;
  customerName: string;
  status: OrderStatus;
}

function updateOrderStatus(order: Order, newStatus: OrderStatus): void {
  order.status = newStatus;
  console.log(`Order ${order.id} status updated to ${order.status}`);
}

const order1: Order = {
  id: "ORD123",
  customerName: "Alice",
  status: OrderStatus.Pending
};

updateOrderStatus(order1, OrderStatus.Shipped);

 Benefits:
Ensures only valid statuses can be assigned

Better IDE support with autocomplete

Centralized management of order states


✅ Literal Types: Restricting Size Options
Let’s say a clothing product can only come in "small", "medium", or "large". You can use a literal union type.
code
type Size = "small" | "medium" | "large";

interface Product {
  name: string;
  price: number;
  size: Size;
}

const tshirt: Product = {
  name: "Cotton T-Shirt",
  price: 499,
  size: "medium" // ✅ Valid
};

// tshirt.size = "extra-large"; ❌ Error
This ensures you don’t accidentally use unsupported sizes like "extra-large" or "tiny".

✅ Another Enum Example: Payment Methodcode
enum PaymentMethod {
  Cash = "CASH",
  Card = "CARD",
  UPI = "UPI"
}

interface Payment {
  method: PaymentMethod;
  amount: number;
}

const payment: Payment = {
  method: PaymentMethod.Card,
  amount: 1500
};
This makes it easy to change the enum values app-wide or refactor names without breaking your code.

