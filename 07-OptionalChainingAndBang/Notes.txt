Optional Chaining and Bang (!) Operator


Optional Chaining (?.)
Optional chaining allows you to safely access nested properties of an object.
If the property does not exist or the value is undefined or null, it returns undefined instead of throwing an error.
Syntax: object?.property?.subProperty

code:
const user = {
  profile: {
    name: "jay",
    age: 25
  }
};

console.log(user?.profile?.name); // "jay"
console.log(user?.address?.city); // undefined, does NOT throw error

Bang Operator (!)
The ! operator (non-null assertion) tells the compiler: “Trust me bro, this value is not null or undefined.”
It bypasses safety checks, so use it only if you're sure the value exists.

Syntax: variable!.property

code:
const username: string | undefined = getUsername();
console.log(username!.toUpperCase()); // Dangerous if username is actually undefined

Real-World Scenario
Imagine you're building a dashboard that loads user data from an API. Initially, the data may not be available due to network delay, and the object could be undefined.
Optional chaining prevents errors like:

code:
// Without optional chaining
console.log(user.pofile.name ) // ❌ This will throw: Cannot read property 'name' of undefined
With optional chaining:

code:
console.log(user?.profile?.name); // ✅ undefined, no crash

Now, imagine you fetched the data and you're absolutely sure user.profile exists. Then you might (cautiously) use the bang operator:
code:
console.log(user!.profile!.name); // ✅ But only safe if you're 100% sure user and profile exist

